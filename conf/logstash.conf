input {
	file {
		path => "/var/log/openstack/nova/nova.log"
		type => "nova"
	}

	file {
		path => "/var/log/openstack/glance/glance.log"
		type => "glance"
	}

	file {
		path => "/var/log/openstack/neutron/neutron.log"
		type => "neutron"
	}

        file {
                path => "/var/log/openstack/cinder/cinder.log"
                type => "cinder"
        }

        file {
                path => "/var/log/openstack/heat/heat.log"
                type => "heat"
        }

	file {
		path => "/var/log/openstack/keystone/keystone.log"
		type => "keystone"
	}

# Count instance-states & types
	exec {
		command => "python /etc/logstash/scripts/active_instances.py"
		interval => 20
	}

        exec {
                command => "python /etc/logstash/scripts/error_instances.py"
                interval => 20
        }

        exec {
                command => "python /etc/logstash/scripts/deleted_instances.py"
                interval => 20
        }
}

filter {
	if [type] == "nova" {
		grok {
			break_on_match => true
			match => [
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{ID} %{GREEDYDATA:openstack_instance_action}",
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{NOTSPACE} %{RESOURCE_DISK_RAM:Free_disk_ram}",
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{NOTSPACE} %{RESOURCE_CPU:Free_vcpus}",
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{WORD} %{NOTSPACE:openstack_image_id} %{NOTSPACE} %{NOTSPACE:openstack_image_location} %{GREEDYDATA:image_message}",
                                "message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{IP:IP} %{QUOTEDSTRING:nova_instance_request} %{NOTSPACE} %{INT:nova_response_code} %{NOTSPACE} %{INT} %{NOTSPACE} %{NOTSPACE:nova_response_time}",
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{BASE_FILE} %{PATH:openstack_basefile_path}"
			]
			add_tag => "openstack_logs"
			add_tag => "nova"
		}
	if ([message] =~"Compute_service record") or ([message] =~"Auditing locally") {
		drop {}
	}
	}

	if [type] == "glance" {
		grok {
			break_on_match => true
			match => [
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GREEDYDATA:test} %{IP:IP}",
			#	"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GLANCE_IMAGE_MESSAGE:glance_image_message}",
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GLANCE_IMAGE_MESSAGE:glance_image_message} %{UUID:glance_image_id}",
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{IP:IP} %{GREEDYDATA} %{QUOTEDSTRING:glance_image_request} %{INT:glance_response_code} %{INT} %{NOTSPACE:glance_response_duration}"
			]
			add_tag => "openstack_logs"
			add_tag => "glance"
		}

	if ([message] =~"Returning detailed image list") {
		drop {}
	}
	}

	if [type] == "neutron" {
		grok {
			break_on_match => true
			match => [
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{DATA} %{UUID:neutron_segment_id} %{WORD} %{WORD} %{WORD:neutron_network_type} %{WORD} %{WORD} %{UUID:neutron_network_id}",
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{IP:IP} %{GREEDYDATA} %{QUOTEDSTRING:neutron_network_request} %{INT:neutron_response_code} %{INT} %{NOTSPACE:neutron_response_duration}",
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{NEUTRON_ACCEPT_MESSAGE:neutron_accept_message}"
			]
			add_tag => "openstack_logs"
			add_tag => "neutron"
		}

	if ([message] =~"Starting new HTTP connection"){
                drop {}
        }
	}

	if [type] == "keystone" {
                grok {
                        break_on_match => true
                        match => [
                                 "message", " %{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{IP:IP} %{GREEDYDATA:test} %{QUOTEDSTRING:keystone_request} %{INT:keystone_response_code} %{INT} %{NOTSPACE:keystone_response_duration}"
                        ]
                        add_tag => "openstack_logs"
                        add_tag => "keystone"
                }
        }

	
	# Not much to monitor at the moment. Using general filter
	if [type] == "cinder" {
		grok {
			break_on_match => true
			match => [
				 "message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GREEDYDATA:cinder_message}"
			]
			add_tag => "openstack_logs"
			add_tag => "cinder"
		}
	}
	
        if [type] == "heat" {
                grok {
                        break_on_match => true
                        match => [
                                 "message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GREEDYDATA:heat_message}"
                        ]
                        add_tag => "openstack_logs"
                        add_tag => "heat"
                }
        }

	if  ([openstack_program] =~"keystoneclient.middleware.auth_token")  {
		drop {}
	}

	if ([message] =~"Quota exceeded for resources") {
		grok {
			match => [
				"message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GREEDYDATA:resource_failed}"
			]
			add_tag => "openstack_logs"
			add_tag => "resource_quota"
			remove_tag => "_grokparsefailure"
		}
	}
	# All matching filter for grokparsefailures, traceback & extensions
	if "_grokparsefailure" in [tags] {
		if ([message] =~"Traceback") {
			grok {
				match => ["message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GREEDYDATA:openstack_trace}"]
				add_tag => "openstack_trace"
				remove_tag => "_grokparsefailure"
			}	
		} else if ([openstack_program] =~ "extensions") {
			grok {
				match => ["message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GREEDYDATA:openstack_extension}"]
				add_tag => "extension_loaded"
				remove_tag => "_grokparsefailure"
			}	
		} else {
			grok {
				match => ["message", "%{HOSTNAME:openstack_hostname} %{TIMESTAMP_ISO8601:timestamp} %{POSINT:openstack_pid} %{OPENSTACK_LOGLEVEL:openstack_loglevel} %{OPENSTACK_PROG:openstack_program}%{REQ_LIST} %{GREEDYDATA:openstack_message}"]
				add_tag => "openstack_logs"
				add_tag => "unmatched_event"
				remove_tag => "_grokparsefailure"
			}
		}
	}

	if "python" in [command] {
		drop{}
	}
}

output {
	elasticsearch {
		host => "localhost:9200"
		protocol => "http"
		cluster => "vagrant_elasticsearch"
		manage_template => false
	}

	# Graphite compute hosts metrics
	if "Free VCPUS" in [Free_vcpus] {
		graphite {
			host => "192.168.11.18"
			metrics => [ "%{openstack_hostname}.free-vcpus", "%{Free_vcpus_count}"]
		}
	}

	if "Free ram" in [Free_disk_ram] {
		graphite {
			host => "192.168.11.18"
			metrics => [ "%{openstack_hostname}.free-ram", "%{Free_disk_ram_count}"]
		}
	}
	
	if "Free disk" in [Free_disk_ram] {
		graphite {
			host => "192.168.11.18"
			metrics => [ "%{openstack_hostname}.free-disk", "%{Free_disk_ram_count}"]
		}
	}
	
	statsd {
		increment => "%{openstack_loglevel}"
	}
	
	file {
		path => "/var/log/openstack/%{openstack_hostname}-%{+YYYY-MM-dd}.log"
		codec => "rubydebug"
	}
}

